{
  "name": "DataCheck",
  "tagline": "Free Hadoop Data Quality for the Masses",
  "body": "## Table of Contents\r\n- [Introduction](#introduction)\r\n- [Startup](#startup)\r\n- [TODO](#todo)\r\n- [React Maintenance](#react-maintenance)\r\n  - [Updating to New Releases](#updating-to-new-releases)\r\n  - [Sending Feedback](#sending-feedback)\r\n  - [Folder Structure](#folder-structure)\r\n  - [Available Scripts](#available-scripts)\r\n    - [npm start](#npm-start)\r\n    - [npm test](#npm-test)\r\n    - [npm run build](#npm-run-build)\r\n    - [npm run eject](#npm-run-eject)\r\n  - [Displaying Lint Output in the Editor](#displaying-lint-output-in-the-editor)\r\n  - [Installing a Dependency](#installing-a-dependency)\r\n  - [Importing a Component](#importing-a-component)\r\n  - [Adding a Stylesheet](#adding-a-stylesheet)\r\n  - [Post-Processing CSS](#post-processing-css)\r\n  - [Adding Images and Fonts](#adding-images-and-fonts)\r\n  - [Using the `public` Folder](#using-the-public-folder)\r\n  - [Adding Bootstrap](#adding-bootstrap)\r\n  - [Adding Flow](#adding-flow)\r\n  - [Adding Custom Environment Variables](#adding-custom-environment-variables)\r\n  - [Can I Use Decorators?](#can-i-use-decorators)\r\n  - [Integrating with a Node Backend](#integrating-with-a-node-backend)\r\n  - [Proxying API Requests in Development](#proxying-api-requests-in-development)\r\n  - [Using HTTPS in Development](#using-https-in-development)\r\n  - [Generating Dynamic `<meta>` Tags on the Server](#generating-dynamic-meta-tags-on-the-server)\r\n  - [Running Tests](#running-tests)\r\n    - [Filename Conventions](#filename-conventions)\r\n    - [Command Line Interface](#command-line-interface)\r\n    - [Version Control Integration](#version-control-integration)\r\n    - [Writing Tests](#writing-tests)\r\n    - [Testing Components](#testing-components)\r\n    - [Using Third Party Assertion Libraries](#using-third-party-assertion-libraries)\r\n    - [Initializing Test Environment](#initializing-test-environment)\r\n    - [Focusing and Excluding Tests](#focusing-and-excluding-tests)\r\n    - [Coverage Reporting](#coverage-reporting)\r\n    - [Continuous Integration](#continuous-integration)\r\n    - [Disabling jsdom](#disabling-jsdom)\r\n    - [Experimental Snapshot Testing](#experimental-snapshot-testing)\r\n  - [Deployment](#deployment)\r\n    - [Building for Relative Paths](#building-for-relative-paths)\r\n    - [GitHub Pages](#github-pages)\r\n    - [Heroku](#heroku)\r\n    - [Modulus](#modulus)\r\n    - [Netlify](#netlify)\r\n    - [Now](#now)\r\n    - [Surge](#surge)\r\n  - [Something Missing?](#something-missing)\r\n\r\n## Introduction\r\n\r\nDataCheck is an open sourced data quality tool for the Hadoop ecosystem. It is built to be extensible and while it currently\r\nsupports only Impala connections, a future TODO is to add Spark 1.6 and 2 support.\r\n\r\nIt currently supports:\r\n* Job Template Creation\r\n* Job Scheduling\r\n* Nested AND-type Rules and Check Types (e.g. if table name matches loans AND has updated_at column, check date_gaps)\r\n* Three types of check: DateGap, Uniqueness, and Nullness\r\n\r\n## Startup\r\n\r\nPlease use:\r\n\r\n`pip install -r requirements.txt`\r\n\r\nTo install all required libraries.\r\n\r\nThe backend requires a database(preferably Postgres but any supported by SqlAlchemy will do) and RabbitMQ. \r\nTo configure the locations of these, please copy config/config.yml.sample to make config/config.yml. \r\nThen you can customize it to your needs.\r\n\r\nIf just using the default values in config/config.yml, running\r\n\r\n`bin/db_setup` will setup your database.\r\n\r\nIf you are using a custom database, run\r\n\r\n`python -m models.helpers.base` \r\n\r\nto setup the database. By default the database will always use \"development\" as the DCHK_ENV,\r\nbut if you set this environmental to 'production' it will use that entry on config.yml.\r\n\r\nOnce this is done, you can turn on Celery and the Celery Beat scheduler using the special script:\r\n\r\n`bin/celery`\r\n\r\nThis starts both the scheduler, and the celery workers simultaneously. The scheduler then schedules a once per 5 minute\r\njob that kills the scheduler, and starts up a new one. In this way, updated job run schedules are reingested by the scheduler\r\nat five minute intervals.\r\n\r\nTo run the web interface, use these commands in separate windows, or with nohup:\r\n\r\n`python server.py`\r\n\r\n`npm start`\r\n\r\nOne turns on the Flask API, and the other will turn on the npm server that will render the actual frontend GUI.\r\n\r\nIt is to this port(normally 3000 that you can visit to see the site):\r\n\r\nlocalhost:3000\r\n\r\nThere is as yet no user authentication of any kind, and the design is very basic.\r\n\r\n## TODO\r\n\r\nThis is open source software and as such I don't have time to add all the things I would like. Here is a roadmap of\r\nthings I wish to add, in the order I wish to add them:\r\n\r\n\r\n* Support for Alembic migrations\r\n* Storing failed rows in S3 for viewing\r\n* Statistical Sampling\r\n* LogLevels\r\n* Spark 1.6 support\r\n* Spark 2 support\r\n* Accept AWS Pubsub for failure notifications\r\n* Encrypt passwords stored for data sources and don't display them\r\n* Use DockerCompose to create development and production setups\r\n* Checks have one log per \"unit work\" instead of one log for the entire check\r\n\r\n## React Maintenance\r\n\r\n### Updating to New Releases\r\n\r\nCreate React App is divided into two packages:\r\n\r\n* `create-react-app` is a global command-line utility that you use to create new projects.\r\n* `react-scripts` is a development dependency in the generated projects (including this one).\r\n\r\nYou almost never need to update `create-react-app` itself: it delegates all the setup to `react-scripts`.\r\n\r\nWhen you run `create-react-app`, it always creates the project with the latest version of `react-scripts` so you’ll get all the new features and improvements in newly created apps automatically.\r\n\r\nTo update an existing project to a new version of `react-scripts`, [open the changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md), find the version you’re currently on (check `package.json` in this folder if you’re not sure), and apply the migration instructions for the newer versions.\r\n\r\nIn most cases bumping the `react-scripts` version in `package.json` and running `npm install` in this folder should be enough, but it’s good to consult the [changelog](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md) for potential breaking changes.\r\n\r\nWe commit to keeping the breaking changes minimal so you can upgrade `react-scripts` painlessly.\r\n\r\n### Sending Feedback\r\n\r\nWe are always open to [your feedback](https://github.com/facebookincubator/create-react-app/issues).\r\n\r\n### Folder Structure\r\n\r\nAfter creation, your project should look like this:\r\n\r\n```\r\nmy-app/\r\n  README.md\r\n  node_modules/\r\n  package.json\r\n  public/\r\n    index.html\r\n    favicon.ico\r\n  src/\r\n    App.css\r\n    App.js\r\n    App.test.js\r\n    index.css\r\n    index.js\r\n    logo.svg\r\n```\r\n\r\nFor the project to build, **these files must exist with exact filenames**:\r\n\r\n* `public/index.html` is the page template;\r\n* `src/index.js` is the JavaScript entry point.\r\n\r\nYou can delete or rename the other files.\r\n\r\nYou may create subdirectories inside `src`. For faster rebuilds, only files inside `src` are processed by Webpack.<br>\r\nYou need to **put any JS and CSS files inside `src`**, or Webpack won’t see them.\r\n\r\nOnly files inside `public` can be used from `public/index.html`.<br>\r\nRead instructions below for using assets from JavaScript and HTML.\r\n\r\nYou can, however, create more top-level directories.<br>\r\nThey will not be included in the production build so you can use them for things like documentation.\r\n\r\n### Available Scripts\r\n\r\nIn the project directory, you can run:\r\n\r\n#### `npm start`\r\n\r\nRuns the app in the development mode.<br>\r\nOpen [http://localhost:3000](http://localhost:3000) to view it in the browser.\r\n\r\nThe page will reload if you make edits.<br>\r\nYou will also see any lint errors in the console.\r\n\r\n#### `npm test`\r\n\r\nLaunches the test runner in the interactive watch mode.<br>\r\nSee the section about [running tests](#running-tests) for more information.\r\n\r\n#### `npm run build`\r\n\r\nBuilds the app for production to the `build` folder.<br>\r\nIt correctly bundles React in production mode and optimizes the build for the best performance.\r\n\r\nThe build is minified and the filenames include the hashes.<br>\r\nYour app is ready to be deployed!\r\n\r\n#### `npm run eject`\r\n\r\n**Note: this is a one-way operation. Once you `eject`, you can’t go back!**\r\n\r\nIf you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\r\n\r\nInstead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.\r\n\r\nYou don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.\r\n\r\n### Displaying Lint Output in the Editor\r\n\r\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\r\n\r\nSome editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.\r\n\r\nThey are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.\r\n\r\nYou would need to install an ESLint plugin for your editor first.\r\n\r\n>**A note for Atom `linter-eslint` users**\r\n\r\n>If you are using the Atom `linter-eslint` plugin, make sure that **Use global ESLint installation** option is checked:\r\n\r\n><img src=\"http://i.imgur.com/yVNNHJM.png\" width=\"300\">\r\n\r\nThen add this block to the `package.json` file of your project:\r\n\r\n```js\r\n{\r\n  // ...\r\n  \"eslintConfig\": {\r\n    \"extends\": \"react-app\"\r\n  }\r\n}\r\n```\r\n\r\nFinally, you will need to install some packages *globally*:\r\n\r\n```sh\r\nnpm install -g eslint-config-react-app@0.3.0 eslint@3.8.1 babel-eslint@7.0.0 eslint-plugin-react@6.4.1 eslint-plugin-import@2.0.1 eslint-plugin-jsx-a11y@2.2.3 eslint-plugin-flowtype@2.21.0\r\n```\r\n\r\nWe recognize that this is suboptimal, but it is currently required due to the way we hide the ESLint dependency. The ESLint team is already [working on a solution to this](https://github.com/eslint/eslint/issues/3458) so this may become unnecessary in a couple of months.\r\n\r\n### Installing a Dependency\r\n\r\nThe generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with `npm`:\r\n\r\n```\r\nnpm install --save <library-name>\r\n```\r\n\r\n### Importing a Component\r\n\r\nThis project setup supports ES6 modules thanks to Babel.<br>\r\nWhile you can still use `require()` and `module.exports`, we encourage you to use [`import` and `export`](http://exploringjs.com/es6/ch_modules.html) instead.\r\n\r\nFor example:\r\n\r\n#### `Button.js`\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    // ...\r\n  }\r\n}\r\n\r\nexport default Button; // Don’t forget to use export default!\r\n```\r\n\r\n#### `DangerButton.js`\r\n\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport Button from './Button'; // Import a component from another file\r\n\r\nclass DangerButton extends Component {\r\n  render() {\r\n    return <Button color=\"red\" />;\r\n  }\r\n}\r\n\r\nexport default DangerButton;\r\n```\r\n\r\nBe aware of the [difference between default and named exports](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281). It is a common source of mistakes.\r\n\r\nWe suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use `export default Button` and `import Button from './Button'`.\r\n\r\nNamed exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.\r\n\r\nLearn more about ES6 modules:\r\n\r\n* [When to use the curly braces?](http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281)\r\n* [Exploring ES6: Modules](http://exploringjs.com/es6/ch_modules.html)\r\n* [Understanding ES6: Modules](https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules)\r\n\r\n### Adding a Stylesheet\r\n\r\nThis project setup uses [Webpack](https://webpack.github.io/) for handling all assets. Webpack offers a custom way of “extending” the concept of `import` beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to **import the CSS from the JavaScript file**:\r\n\r\n#### `Button.css`\r\n\r\n```css\r\n.Button {\r\n  padding: 20px;\r\n}\r\n```\r\n\r\n#### `Button.js`\r\n\r\n```js\r\nimport React, { Component } from 'react';\r\nimport './Button.css'; // Tell Webpack that Button.js uses these styles\r\n\r\nclass Button extends Component {\r\n  render() {\r\n    // You can use them as regular CSS styles\r\n    return <div className=\"Button\" />;\r\n  }\r\n}\r\n```\r\n\r\n**This is not required for React** but many people find this feature convenient. You can read about the benefits of this approach [here](https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b). However you should be aware that this makes your code less portable to other build tools and environments than Webpack.\r\n\r\nIn development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified `.css` file in the build output.\r\n\r\nIf you are concerned about using Webpack-specific semantics, you can put all your CSS right into `src/index.css`. It would still be imported from `src/index.js`, but you could always remove that import if you later migrate to a different build tool.\r\n\r\n### Post-Processing CSS\r\n\r\nThis project setup minifies your CSS and adds vendor prefixes to it automatically through [Autoprefixer](https://github.com/postcss/autoprefixer) so you don’t need to worry about it.\r\n\r\nFor example, this:\r\n\r\n```css\r\n.App {\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n}\r\n```\r\n\r\nbecomes this:\r\n\r\n```css\r\n.App {\r\n  display: -webkit-box;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -webkit-box-orient: horizontal;\r\n  -webkit-box-direction: normal;\r\n      -ms-flex-direction: row;\r\n          flex-direction: row;\r\n  -webkit-box-align: center;\r\n      -ms-flex-align: center;\r\n          align-items: center;\r\n}\r\n```\r\n\r\nThere is currently no support for preprocessors such as Less, or for sharing variables across CSS files.\r\n\r\n### Adding Images and Fonts\r\n\r\nWith Webpack, using static assets like images and fonts works similarly to CSS.\r\n\r\nYou can **`import` an image right in a JavaScript module**. This tells Webpack to include that image in the bundle. Unlike CSS imports, importing an image or a font gives you a string value. This value is the final image path you can reference in your code.\r\n\r\nHere is an example:\r\n\r\n```js\r\nimport React from 'react';\r\nimport logo from './logo.png'; // Tell Webpack this JS file uses this image\r\n\r\nconsole.log(logo); // /logo.84287d09.png\r\n\r\nfunction Header() {\r\n  // Import result is the URL of your image\r\n  return <img src={logo} alt=\"Logo\" />;\r\n}\r\n\r\nexport default function Header;\r\n```\r\n\r\nThis ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.\r\n\r\nThis works in CSS too:\r\n\r\n```css\r\n.Logo {\r\n  background-image: url(./logo.png);\r\n}\r\n```\r\n\r\nWebpack finds all relative module references in CSS (they start with `./`) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.\r\n\r\nPlease be advised that this is also a custom feature of Webpack.\r\n\r\n**It is not required for React** but many people enjoy it (and React Native uses a similar mechanism for images).<br>\r\nAn alternative way of handling static assets is described in the next section.\r\n\r\n### Using the `public` Folder\r\n\r\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\r\n\r\nNormally we encourage you to `import` assets in JavaScript files as described above. This mechanism provides a number of benefits:\r\n\r\n* Scripts and stylesheets get minified and bundled together to avoid extra network requests.\r\n* Missing files cause compilation errors instead of 404 errors for your users.\r\n* Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.\r\n\r\nHowever there is an **escape hatch** that you can use to add an asset outside of the module system.\r\n\r\nIf you put a file into the `public` folder, it will **not** be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the `public` folder, you need to use a special variable called `PUBLIC_URL`.\r\n\r\nInside `index.html`, you can use it like this:\r\n\r\n```html\r\n<link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\">\r\n```\r\n\r\nOnly files inside the `public` folder will be accessible by `%PUBLIC_URL%` prefix. If you need to use a file from `src` or `node_modules`, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.\r\n\r\nWhen you run `npm run build`, Create React App will substitute `%PUBLIC_URL%` with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.\r\n\r\nIn JavaScript code, you can use `process.env.PUBLIC_URL` for similar purposes:\r\n\r\n```js\r\nrender() {\r\n  // Note: this is an escape hatch and should be used sparingly!\r\n  // Normally we recommend using `import` for getting asset URLs\r\n  // as described in “Adding Images and Fonts” above this section.\r\n  return <img src={process.env.PUBLIC_URL + '/img/logo.png'} />;\r\n}\r\n```\r\n\r\nKeep in mind the downsides of this approach:\r\n\r\n* None of the files in `public` folder get post-processed or minified.\r\n* Missing files will not be called at compilation time, and will cause 404 errors for your users.\r\n* Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.\r\n\r\nHowever, it can be handy for referencing assets like [`manifest.webmanifest`](https://developer.mozilla.org/en-US/docs/Web/Manifest) from HTML, or including small scripts like [`pace.js`](http://github.hubspot.com/pace/docs/welcome/) outside of the bundled code.\r\n\r\n### Adding Bootstrap\r\n\r\nYou don’t have to use [React Bootstrap](https://react-bootstrap.github.io) together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:\r\n\r\nInstall React Bootstrap and Bootstrap from NPM. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:\r\n\r\n```\r\nnpm install react-bootstrap --save\r\nnpm install bootstrap@3 --save\r\n```\r\n\r\nImport Bootstrap CSS and optionally Bootstrap theme CSS in the ```src/index.js``` file:\r\n\r\n```js\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport 'bootstrap/dist/css/bootstrap-theme.css';\r\n```\r\n\r\nImport required React Bootstrap components within ```src/App.js``` file or your custom component files:\r\n\r\n```js\r\nimport { Navbar, Jumbotron, Button } from 'react-bootstrap';\r\n```\r\n\r\nNow you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example [`App.js`](https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js) redone using React Bootstrap.\r\n\r\n### Adding Flow\r\n\r\nFlow typing is currently [not supported out of the box](https://github.com/facebookincubator/create-react-app/issues/72) with the default `.flowconfig` generated by Flow. If you run it, you might get errors like this:\r\n\r\n```js\r\nnode_modules/fbjs/lib/Deferred.js.flow:60\r\n 60:     Promise.prototype.done.apply(this._promise, arguments);\r\n                           ^^^^ property `done`. Property not found in\r\n495: declare class Promise<+R> {\r\n     ^ Promise. See lib: /private/tmp/flow/flowlib_34952d31/core.js:495\r\n\r\nnode_modules/fbjs/lib/shallowEqual.js.flow:29\r\n 29:     return x !== 0 || 1 / (x: $FlowIssue) === 1 / (y: $FlowIssue);\r\n                                   ^^^^^^^^^^ identifier `$FlowIssue`. Could not resolve name\r\n```\r\n\r\nTo fix this, change your `.flowconfig` to look like this:\r\n\r\n```ini\r\n[ignore]\r\n<PROJECT_ROOT>/node_modules/fbjs/.*\r\n```\r\n\r\nRe-run flow, and you shouldn’t get any extra issues.\r\n\r\n### Adding Custom Environment Variables\r\n\r\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\r\n\r\nYour project can consume variables declared in your environment as if they were declared locally in your JS files. By\r\ndefault you will have `NODE_ENV` defined for you, and any other environment variables starting with\r\n`REACT_APP_`. These environment variables will be defined for you on `process.env`. For example, having an environment\r\nvariable named `REACT_APP_SECRET_CODE` will be exposed in your JS as `process.env.REACT_APP_SECRET_CODE`, in addition\r\nto `process.env.NODE_ENV`.\r\n\r\n>Note: Changing any environment variables will require you to restart the development server if it is running.\r\n\r\nThese environment variables can be useful for displaying information conditionally based on where the project is\r\ndeployed or consuming sensitive data that lives outside of version control.\r\n\r\nFirst, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined\r\nin the environment inside a `<form>`:\r\n\r\n```jsx\r\nrender() {\r\n  return (\r\n    <div>\r\n      <small>You are running this application in <b>{process.env.NODE_ENV}</b> mode.</small>\r\n      <form>\r\n        <input type=\"hidden\" defaultValue={process.env.REACT_APP_SECRET_CODE} />\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nDuring the build, `process.env.REACT_APP_SECRET_CODE` will be replaced with the current value of the `REACT_APP_SECRET_CODE` environment variable. Remember that the `NODE_ENV` variable will be set for you automatically.\r\n\r\nWhen you load the app in the browser and inspect the `<input>`, you will see its value set to `abcdef`, and the bold text will show the environment provided when using `npm start`:\r\n\r\n```html\r\n<div>\r\n  <small>You are running this application in <b>development</b> mode.</small>\r\n  <form>\r\n    <input type=\"hidden\" value=\"abcdef\" />\r\n  </form>\r\n</div>\r\n```\r\n\r\nHaving access to the `NODE_ENV` is also useful for performing actions conditionally:\r\n\r\n```js\r\nif (process.env.NODE_ENV !== 'production') {\r\n  analytics.disable();\r\n}\r\n```\r\n\r\nThe above form is looking for a variable called `REACT_APP_SECRET_CODE` from the environment. In order to consume this\r\nvalue, we need to have it defined in the environment. This can be done using two ways: either in your shell or in\r\na `.env` file.\r\n\r\n#### Adding Temporary Environment Variables In Your Shell\r\n\r\nDefining environment variables can vary between OSes. It's also important to know that this manner is temporary for the\r\nlife of the shell session.\r\n\r\n##### Windows (cmd.exe)\r\n\r\n```cmd\r\nset REACT_APP_SECRET_CODE=abcdef&&npm start\r\n```\r\n\r\n(Note: the lack of whitespace is intentional.)\r\n\r\n##### Linux, OS X (Bash)\r\n\r\n```bash\r\nREACT_APP_SECRET_CODE=abcdef npm start\r\n```\r\n\r\n#### Adding Development Environment Variables In `.env`\r\n\r\n>Note: this feature is available with `react-scripts@0.5.0` and higher.\r\n\r\nTo define permanent environment variables, create a file called `.env` in the root of your project:\r\n\r\n```\r\nREACT_APP_SECRET_CODE=abcdef\r\n```\r\n\r\nThese variables will act as the defaults if the machine does not explicitly set them.<br>\r\nPlease refer to the [dotenv documentation](https://github.com/motdotla/dotenv) for more details.\r\n\r\n>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need\r\nthese defined as well. Consult their documentation how to do this. For example, see the documentation for [Travis CI](https://docs.travis-ci.com/user/environment-variables/) or [Heroku](https://devcenter.heroku.com/articles/config-vars).\r\n\r\n### Can I Use Decorators?\r\n\r\nMany popular libraries use [decorators](https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841) in their documentation.<br>\r\nCreate React App doesn’t support decorator syntax at the moment because:\r\n\r\n* It is an experimental proposal and is subject to change.\r\n* The current specification version is not officially supported by Babel.\r\n* If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.\r\n\r\nHowever in many cases you can rewrite decorator-based code without decorators just as fine.<br>\r\nPlease refer to these two threads for reference:\r\n\r\n* [#214](https://github.com/facebookincubator/create-react-app/issues/214)\r\n* [#411](https://github.com/facebookincubator/create-react-app/issues/411)\r\n\r\nCreate React App will add decorator support when the specification advances to a stable stage.\r\n\r\n### Integrating with a Node Backend\r\n\r\nCheck out [this tutorial](https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/) for instructions on integrating an app with a Node backend running on another port, and using `fetch()` to access it. You can find the companion GitHub repository [here](https://github.com/fullstackreact/food-lookup-demo).\r\n\r\n### Proxying API Requests in Development\r\n\r\n>Note: this feature is available with `react-scripts@0.2.3` and higher.\r\n\r\nPeople often serve the front-end React app from the same host and port as their backend implementation.<br>\r\nFor example, a production setup might look like this after the app is deployed:\r\n\r\n```\r\n/             - static server returns index.html with React app\r\n/todos        - static server returns index.html with React app\r\n/api/todos    - server handles any /api/* requests using the backend implementation\r\n```\r\n\r\nSuch setup is **not** required. However, if you **do** have a setup like this, it is convenient to write requests like `fetch('/api/todos')` without worrying about redirecting them to another host or port during development.\r\n\r\nTo tell the development server to proxy any unknown requests to your API server in development, add a `proxy` field to your `package.json`, for example:\r\n\r\n```js\r\n  \"proxy\": \"http://localhost:4000\",\r\n```\r\n\r\nThis way, when you `fetch('/api/todos')` in development, the development server will recognize that it’s not a static asset, and will proxy your request to `http://localhost:4000/api/todos` as a fallback. The development server will only attempt to send requests without a `text/html` accept header to the proxy.\r\n\r\nConveniently, this avoids [CORS issues](http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations) and error messages like this in development:\r\n\r\n```\r\nFetch API cannot load http://localhost:4000/api/todos. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\r\n```\r\n\r\nKeep in mind that `proxy` only has effect in development (with `npm start`), and it is up to you to ensure that URLs like `/api/todos` point to the right thing in production. You don’t have to use the `/api` prefix. Any unrecognized request without a `text/html` accept header will be redirected to the specified `proxy`.\r\n\r\nCurrently the `proxy` option only handles HTTP requests, and it won’t proxy WebSocket connections.<br>\r\nIf the `proxy` option is **not** flexible enough for you, alternatively you can:\r\n\r\n* Enable CORS on your server ([here’s how to do it for Express](http://enable-cors.org/server_expressjs.html)).\r\n* Use [environment variables](#adding-custom-environment-variables) to inject the right server host and port into your app.\r\n\r\n### Using HTTPS in Development\r\n\r\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\r\n\r\nYou may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using [the \"proxy\" feature](#proxying-api-requests-in-development) to proxy requests to an API server when that API server is itself serving HTTPS.\r\n\r\nTo do this, set the `HTTPS` environment variable to `true`, then start the dev server as usual with `npm start`:\r\n\r\n##### Windows (cmd.exe)\r\n\r\n```cmd\r\nset HTTPS=true&&npm start\r\n```\r\n\r\n(Note: the lack of whitespace is intentional.)\r\n\r\n##### Linux, OS X (Bash)\r\n\r\n```bash\r\nHTTPS=true npm start\r\n```\r\n\r\nNote that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.\r\n\r\n### Generating Dynamic `<meta>` Tags on the Server\r\n\r\nSince Create React App doesn’t support server rendering, you might be wondering how to make `<meta>` tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:\r\n\r\n```html\r\n<!doctype html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta property=\"og:title\" content=\"%OG_TITLE%\">\r\n    <meta property=\"og:description\" content=\"%OG_DESCRIPTION%\">\r\n```\r\n\r\nThen, on the server, regardless of the backend you use, you can read `index.html` into memory and replace `%OG_TITLE%`, `%OG_DESCRIPTION%`, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!\r\n\r\nIf you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.\r\n\r\n### Running Tests\r\n\r\n>Note: this feature is available with `react-scripts@0.3.0` and higher.<br>\r\n>[Read the migration guide to learn how to enable it in older projects!](https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030)\r\n\r\nCreate React App uses [Jest](https://facebook.github.io/jest/) as its test runner. To prepare for this integration, we did a [major revamp](https://facebook.github.io/jest/blog/2016/09/01/jest-15.html) of Jest so if you heard bad things about it years ago, give it another try.\r\n\r\nJest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.\r\n\r\nWhile Jest provides browser globals such as `window` thanks to [jsdom](https://github.com/tmpvar/jsdom), they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.\r\n\r\nWe recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.\r\n\r\n#### Filename Conventions\r\n\r\nJest will look for test files with any of the following popular naming conventions:\r\n\r\n* Files with `.js` suffix in `__tests__` folders.\r\n* Files with `.test.js` suffix.\r\n* Files with `.spec.js` suffix.\r\n\r\nThe `.test.js` / `.spec.js` files (or the `__tests__` folders) can be located at any depth under the `src` top level folder.\r\n\r\nWe recommend to put the test files (or `__tests__` folders) next to the code they are testing so that relative imports appear shorter. For example, if `App.test.js` and `App.js` are in the same folder, the test just needs to `import App from './App'` instead of a long relative path. Colocation also helps find tests more quickly in larger projects.\r\n\r\n#### Command Line Interface\r\n\r\nWhen you run `npm test`, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like `npm start` recompiles the code.\r\n\r\nThe watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:\r\n\r\n![Jest watch mode](http://facebook.github.io/jest/img/blog/15-watch.gif)\r\n\r\n#### Version Control Integration\r\n\r\nBy default, when you run `npm test`, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests runs fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.\r\n\r\nJest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press `a` in the watch mode to force Jest to run all tests.\r\n\r\nJest will always run all tests on a [continuous integration](#continuous-integration) server or if the project is not inside a Git or Mercurial repository.\r\n\r\n#### Writing Tests\r\n\r\nTo create tests, add `it()` (or `test()`) blocks with the name of the test and its code. You may optionally wrap them in `describe()` blocks for logical grouping but this is neither required nor recommended.\r\n\r\nJest provides a built-in `expect()` global function for making assertions. A basic test could look like this:\r\n\r\n```js\r\nimport sum from './sum';\r\n\r\nit('sums numbers', () => {\r\n  expect(sum(1, 2)).toEqual(3);\r\n  expect(sum(2, 2)).toEqual(4);\r\n});\r\n```\r\n\r\nAll `expect()` matchers supported by Jest are [extensively documented here](http://facebook.github.io/jest/docs/api.html#expect-value).<br>\r\nYou can also use [`jest.fn()` and `expect(fn).toBeCalled()`](http://facebook.github.io/jest/docs/api.html#tobecalled) to create “spies” or mock functions.\r\n\r\n#### Testing Components\r\n\r\nThere is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.\r\n\r\nDifferent projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:\r\n\r\n```js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nit('renders without crashing', () => {\r\n  const div = document.createElement('div');\r\n  ReactDOM.render(<App />, div);\r\n});\r\n```\r\n\r\nThis test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot value with very little effort so they are great as a starting point, and this is the test you will find in `src/App.test.js`.\r\n\r\nWhen you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.\r\n\r\nIf you’d like to test components in isolation from the child components they render, we recommend using [`shallow()` rendering API](http://airbnb.io/enzyme/docs/api/shallow.html) from [Enzyme](http://airbnb.io/enzyme/). You can write a smoke test with it too:\r\n\r\n```sh\r\nnpm install --save-dev enzyme react-addons-test-utils\r\n```\r\n\r\n```js\r\nimport React from 'react';\r\nimport { shallow } from 'enzyme';\r\nimport App from './App';\r\n\r\nit('renders without crashing', () => {\r\n  shallow(<App />);\r\n});\r\n```\r\n\r\nUnlike the previous smoke test using `ReactDOM.render()`, this test only renders `<App>` and doesn’t go deeper. For example, even if `<App>` itself renders a `<Button>` that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports [full rendering with `mount()`](http://airbnb.io/enzyme/docs/api/mount.html), and you can also use it for testing state changes and component lifecycle.\r\n\r\nYou can read the [Enzyme documentation](http://airbnb.io/enzyme/) for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in `expect()` and `jest.fn()` for spies.\r\n\r\nHere is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:\r\n\r\n```js\r\nimport React from 'react';\r\nimport { shallow } from 'enzyme';\r\nimport App from './App';\r\n\r\nit('renders welcome message', () => {\r\n  const wrapper = shallow(<App />);\r\n  const welcome = <h2>Welcome to React</h2>;\r\n  // expect(wrapper.contains(welcome)).to.equal(true);\r\n  expect(wrapper.contains(welcome)).toEqual(true);\r\n});\r\n```\r\n\r\nAll Jest matchers are [extensively documented here](http://facebook.github.io/jest/docs/api.html#expect-value).<br>\r\nNevertheless you can use a third-party assertion library like [Chai](http://chaijs.com/) if you want to, as described below.\r\n\r\n#### Using Third Party Assertion Libraries\r\n\r\nWe recommend that you use `expect()` for assertions and `jest.fn()` for spies. If you are having issues with them please [file those against Jest](https://github.com/facebook/jest/issues/new), and we’ll fix them. We intend to keep making them better for React, supporting, for example, [pretty-printing React elements as JSX](https://github.com/facebook/jest/pull/1566).\r\n\r\nHowever, if you are used to other libraries, such as [Chai](http://chaijs.com/) and [Sinon](http://sinonjs.org/), or if you have existing code using them that you’d like to port over, you can import them normally like this:\r\n\r\n```js\r\nimport sinon from 'sinon';\r\nimport { expect } from 'chai';\r\n```\r\n\r\nand then use them in your tests like you normally do.\r\n\r\n#### Initializing Test Environment\r\n\r\n>Note: this feature is available with `react-scripts@0.4.0` and higher.\r\n\r\nIf your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a `src/setupTests.js` to your project. It will be automatically executed before running your tests.\r\n\r\nFor example:\r\n\r\n##### `src/setupTests.js`\r\n```js\r\nconst localStorageMock = {\r\n  getItem: jest.fn(),\r\n  setItem: jest.fn(),\r\n  clear: jest.fn()\r\n};\r\nglobal.localStorage = localStorageMock\r\n```\r\n\r\n#### Focusing and Excluding Tests\r\n\r\nYou can replace `it()` with `xit()` to temporarily exclude a test from being executed.<br>\r\nSimilarly, `fit()` lets you focus on a specific test without running any other tests.\r\n\r\n#### Coverage Reporting\r\n\r\nJest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br>\r\nRun `npm test -- --coverage` (note extra `--` in the middle) to include a coverage report like this:\r\n\r\n![coverage report](http://i.imgur.com/5bFhnTS.png)\r\n\r\nNote that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.\r\n\r\n#### Continuous Integration\r\n\r\nBy default `npm test` runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called `CI`. Popular CI servers already set it by default but you can do this yourself too:\r\n\r\n#### On CI servers\r\n##### Travis CI\r\n\r\n1. Following the [Travis Getting started](https://docs.travis-ci.com/user/getting-started/) guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your [profile](https://travis-ci.org/profile) page.\r\n1. Add a `.travis.yml` file to your git repository.\r\n```\r\nlanguage: node_js\r\nnode_js:\r\n  - 4\r\n  - 6\r\ncache:\r\n  directories:\r\n    - node_modules\r\nscript:\r\n  - npm test\r\n```\r\n1. Trigger your first build with a git push.\r\n1. [Customize your Travis CI Build](https://docs.travis-ci.com/user/customizing-the-build/) if needed.\r\n\r\n#### On your own environment\r\n###### Windows (cmd.exe)\r\n\r\n```cmd\r\nset CI=true&&npm test\r\n```\r\n\r\n(Note: the lack of whitespace is intentional.)\r\n\r\n###### Linux, OS X (Bash)\r\n\r\n```bash\r\nCI=true npm test\r\n```\r\n\r\nThis way Jest will run tests once instead of launching the watcher.\r\n\r\nIf you find yourself doing this often in development, please [file an issue](https://github.com/facebookincubator/create-react-app/issues/new) to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.\r\n\r\n#### Disabling jsdom\r\n\r\nBy default, the `package.json` of the generated project looks like this:\r\n\r\n```js\r\n  // ...\r\n  \"scripts\": {\r\n    // ...\r\n    \"test\": \"react-scripts test --env=jsdom\"\r\n  }\r\n```\r\n\r\nIf you know that none of your tests depend on [jsdom](https://github.com/tmpvar/jsdom), you can safely remove `--env=jsdom`, and your tests will run faster.<br>\r\nTo help you make up your mind, here is a list of APIs that **need jsdom**:\r\n\r\n* Any browser globals like `window` and `document`\r\n* [`ReactDOM.render()`](https://facebook.github.io/react/docs/top-level-api.html#reactdom.render)\r\n* [`TestUtils.renderIntoDocument()`](https://facebook.github.io/react/docs/test-utils.html#renderintodocument) ([a shortcut](https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91) for the above)\r\n* [`mount()`](http://airbnb.io/enzyme/docs/api/mount.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\r\n\r\nIn contrast, **jsdom is not needed** for the following APIs:\r\n\r\n* [`TestUtils.createRenderer()`](https://facebook.github.io/react/docs/test-utils.html#shallow-rendering) (shallow rendering)\r\n* [`shallow()`](http://airbnb.io/enzyme/docs/api/shallow.html) in [Enzyme](http://airbnb.io/enzyme/index.html)\r\n\r\nFinally, jsdom is also not needed for [snapshot testing](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html). Longer term, this is the direction we are interested in exploring, but snapshot testing is [not fully baked yet](https://github.com/facebookincubator/create-react-app/issues/372) so we don’t officially encourage its usage yet.\r\n\r\n#### Experimental Snapshot Testing\r\n\r\nSnapshot testing is a new feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output.\r\n\r\nThis feature is experimental and still [has major usage issues](https://github.com/facebookincubator/create-react-app/issues/372) so we only encourage you to use it if you like experimental technology. We intend to gradually improve it over time and eventually offer it as the default solution for testing React components, but this will take time. [Read more about snapshot testing.](http://facebook.github.io/jest/blog/2016/07/27/jest-14.html)\r\n\r\n### Deployment\r\n\r\n### Building for Relative Paths\r\n\r\nBy default, Create React App produces a build assuming your app is hosted at the server root.<br>\r\nTo override this, specify the `homepage` in your `package.json`, for example:\r\n\r\n```js\r\n  \"homepage\": \"http://mywebsite.com/relativepath\",\r\n```\r\n\r\nThis will let Create React App correctly infer the root path to use in the generated HTML file.\r\n\r\n#### GitHub Pages\r\n\r\n>Note: this feature is available with `react-scripts@0.2.0` and higher.\r\n\r\nOpen your `package.json` and add a `homepage` field:\r\n\r\n```js\r\n  \"homepage\": \"http://myusername.github.io/my-app\",\r\n```\r\n\r\n**The above step is important!**<br>\r\nCreate React App uses the `homepage` field to determine the root URL in the built HTML file.\r\n\r\nNow, whenever you run `npm run build`, you will see a cheat sheet with instructions on how to deploy to GitHub pages.\r\n\r\nTo publish it at [http://myusername.github.io/my-app](http://myusername.github.io/my-app), run:\r\n\r\n```sh\r\nnpm install --save-dev gh-pages\r\n```\r\n\r\nAdd the following script in your `package.json`:\r\n\r\n```js\r\n  // ...\r\n  \"scripts\": {\r\n    // ...\r\n    \"deploy\": \"gh-pages -d build\"\r\n  }\r\n```\r\n\r\nThen run:\r\n\r\n```sh\r\nnpm run deploy\r\n```\r\n\r\nNote that GitHub Pages doesn't support routers that use the HTML5 `pushState` history API under the hood (for example, React Router using `browserHistory`). This is because when there is a fresh page load for a url like `http://user.github.io/todomvc/todos/42`, where `/todos/42` is a frontend route, the GitHub Pages server returns 404 because it knows nothing of `/todos/42`. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:\r\n* You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to `hashHistory` for this effect, but the URL will be longer and more verbose (for example, `http://user.github.io/todomvc/#/todos/42?_k=yknaj`). [Read more](https://github.com/reactjs/react-router/blob/master/docs/guides/Histories.md#histories) about different history implementations in React Router.\r\n* Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your `index.html` page with a special redirect parameter. You would need to add a `404.html` file with the redirection code to the `build` folder before deploying your project, and you’ll need to add code handling the redirect parameter to `index.html`. You can find a detailed explanation of this technique [in this guide](https://github.com/rafrex/spa-github-pages).\r\n\r\n#### Heroku\r\n\r\nUse the [Heroku Buildpack for Create React App](https://github.com/mars/create-react-app-buildpack).<br>\r\nYou can find instructions in [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration).\r\n\r\n#### Modulus\r\n\r\nSee the [Modulus blog post](http://blog.modulus.io/deploying-react-apps-on-modulus) on how to deploy your react app to Modulus.\r\n\r\n### Netlify\r\n\r\n**To do a manual deploy to Netlify's CDN:**\r\n\r\n```sh\r\nnpm install netlify-cli\r\nnetlify deploy\r\n```\r\n\r\nChoose `build` as the path to deploy.\r\n\r\n**To setup continuous delivery:**\r\n\r\nWith this setup Netlify will build and deploy when you push to git or open a pull request:\r\n\r\n1. [Start a new netlify project](https://app.netlify.com/signup)\r\n2. Pick your Git hosting service and select your repository\r\n3. Click `Build your site`\r\n\r\n**Support for client-side routing:**\r\n\r\nTo support `pushState`, make sure to create a `public/_redirects` file with the following rewrite rules:\r\n\r\n```\r\n/*  /index.html  200\r\n```\r\n\r\nWhen you build the project, Create React App will place the `public` folder contents into the build output.\r\n\r\n#### Now\r\n\r\nSee [this example](https://github.com/xkawi/create-react-app-now) for a zero-configuration single-command deployment with [now](https://zeit.co/now).\r\n\r\n#### Surge\r\n\r\nInstall the Surge CLI if you haven't already by running `npm install -g surge`. Run the `surge` command and log in you or create a new account. You just need to specify the *build* folder and your custom domain, and you are done.\r\n\r\n```sh\r\n              email: email@domain.com\r\n           password: ********\r\n       project path: /path/to/project/build\r\n               size: 7 files, 1.8 MB\r\n             domain: create-react-app.surge.sh\r\n             upload: [====================] 100%, eta: 0.0s\r\n   propagate on CDN: [====================] 100%\r\n               plan: Free\r\n              users: email@domain.com\r\n         IP Address: X.X.X.X\r\n\r\n    Success! Project is published and running at create-react-app.surge.sh\r\n```\r\n\r\nNote that in order to support routers that use HTML5 `pushState` API, you may want to rename the `index.html` in your build folder to `200.html` before deploying to Surge. This [ensures that every URL falls back to that file](https://surge.sh/help/adding-a-200-page-for-client-side-routing).\r\n\r\n### Something Missing?\r\n\r\nIf you have ideas for more “How To” recipes that should be on this page, [let us know](https://github.com/facebookincubator/create-react-app/issues) or [contribute some!](https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}